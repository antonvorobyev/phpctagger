<?php

namespace PhpCtagger\Composer\Script;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-20 at 06:56:07.
 */
class CtaggerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \Composer\Composer
     */
    protected $composerMock;

    /**
     * @var \Composer\Config
     */
    protected $composerConfig;

    /**
     * @var \Symfony\Component\Console\Output\OutputInterface
     */
    protected $outputMock;

    /**
     * @var \Composer\IO\IOInterface
     */
    protected $consoleIO;

    /**
     * @var \Composer\Script\Event
     */
    protected $event;
    
    /**
     * @var Test temp directory
     */
    protected $testTempDir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // Create Composer config
        $this->composerConfig = new \Composer\Config();

        // Set up Composer environment
        $this->composerMock = $this->getMock('Composer\Composer');
        $inputMock = $this->getMock('Symfony\Component\Console\Input\InputInterface');
        $this->outputMock = $this->getMock('Symfony\Component\Console\Output\OutputInterface');
        $helperMock = $this->getMock('Symfony\Component\Console\Helper\HelperSet');
        $this->consoleIO = new \Composer\IO\ConsoleIO($inputMock, $this->outputMock, $helperMock);
        $this->event = new \Composer\Script\Event('dummy-event-name', $this->composerMock, $this->consoleIO, $devMode = true);
        $this->testTempDir = PROJECT_ROOT_DIR . '/tests/_files';
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        if (file_exists($this->testTempDir . '/tags')) {
            unlink($this->testTempDir . '/tags');
        }
        
        $this->composerConfig = null;
        $this->event = null;
        
        parent::tearDown();
    }

    public function testCtagDevModeTrue()
    {
        $this->assertFileNotExists($this->testTempDir . '/tags');

        $this->composerMock->expects($this->once())
                ->method('getConfig')
                ->will($this->returnValue($this->composerConfig));

        $this->outputMock->expects($this->exactly(9))
                    ->method('write');

        Ctagger::setTagsDir($this->testTempDir);
        Ctagger::ctag($this->event);

        $this->assertFileExists($this->testTempDir . '/tags');
    }

    /**
     * Ctagger should not be run when $devMode is false
     */
    public function testCtagDevModeFalse()
    {
        $this->assertFileNotExists($this->testTempDir . '/tags');

        $this->composerMock->expects($this->exactly(0))
                ->method('getConfig')
                ->will($this->returnValue($this->composerConfig));

        $this->outputMock->expects($this->once())
            ->method('write')
            ->with('PhpCtagger: Composer is not in dev mode. Will not create/modify ctags file.');

        $event = new \Composer\Script\Event('dummy-event-name', $this->composerMock, $this->consoleIO, $devMode = false);

        Ctagger::setTagsDir($this->testTempDir);
        Ctagger::ctag($event);

        $this->assertFileNotExists($this->testTempDir . '/tags');
    }

    public function testWillDeleteExistingTagfile()
    {
        touch($this->testTempDir . '/tags');

        $this->assertFileExists($this->testTempDir . '/tags');

        $this->composerMock->expects($this->once())
                ->method('getConfig')
                ->will($this->returnValue($this->composerConfig));

        $this->outputMock->expects($this->at(1))
            ->method('write')
            ->with('Deleting existing tagfile . . .');

        Ctagger::setTagsDir($this->testTempDir);
        Ctagger::ctag($this->event);
    }

    public function testGetInstalledCtags()
    {
        $this->assertEquals('ctags', Ctagger::getInstalledCtags());
    }

    public function testGetCtagsVersion()
    {
        $this->assertEquals('5.8', Ctagger::getCtagsVersion());
    }

}
